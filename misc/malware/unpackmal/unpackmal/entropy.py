import math

class Entropy:
    def __init__(self):
        self.offset = []
        self.entropy = []

    def graph_entropy(self, binary, matches):
        import pyqtgraph
        from pyqtgraph.Qt import QtGui
        self._calculate_entropy(binary)
        plt = pyqtgraph.plot(title=binary, clear=True)
        plt.setYRange(0,1)
        plt.plot(self.offset, self.entropy, pen='y')
        plt.setLabel('left', 'Entropy', units='E')
        plt.setLabel('bottom', 'Offset', units='B')
        QtGui.QApplication.instance().exec_()
        pyqtgraph.exit()

    def _calculate_entropy(self, binary):
        fp = open(binary, 'rb')
        while True:
            entropy = 0
            offset = fp.tell()
            data = fp.read(1024)
            length = len(data)
            if length < 1:
                return
            seen = dict(((chr(x), 0) for x in range(0, 256)))
            for byte in data:
                seen[byte] += 1
            for x in range(0, 256):
                p_x = float(seen[chr(x)]) / length
                if p_x > 0:
                    entropy -= p_x * math.log(p_x, 2)
            self.offset.append(offset)
            self.entropy.append(entropy / 8)
