#!/usr/bin/env python
import os
import sys
import argparse
from unpackmal.scanner import Scanner

def unpackmal(binary, signatures, entropy, unpack_dst):
    scanner = Scanner()
    if scanner.is_packed(binary):
        sys.stdout.write('\nprobably packed\n')
    else:
        sys.stdout.write('\nprobably Not packed\n')
    match = scanner.signature(binary, signatures)
    if match:
        sys.stdout.write('%s\n\n' % match)
    if entropy:
        from unpackmal.entropy import Entropy
        entropy = Entropy()
        entropy.graph_entropy(binary, match)
        exit('Bye')
    if not match:
        exit('No signature found\n')
    if unpack_dst:
        from unpackmal.unpack import Unpack
        unpack = Unpack()
        unpacker = unpack.lookup_table(match)
        if unpacker:
            unpacker = getattr(unpack, unpacker)
            unpacker(binary, unpack_dst)
        else:
            sys.stderr.write('[Error] no equivalent unpacker\n')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('binary', help='binary to be analysed')
    parser.add_argument('-s', '--signature', metavar=('f'),
        default=os.path.expanduser('~/.pe_signatures'),
        help='signatures file (DEFAULT: ~/.pe_signatures)')
    parser.add_argument('-u', '--unpack', metavar=('dst'),
        help='attempt to unpack the binary')
    parser.add_argument('-e', '--entropy', action='store_true',
        help='graph entropy')
    args = parser.parse_args()
    unpackmal(args.binary, args.signature, args.entropy, args.unpack)
