#!/usr/bin/env python
import os
import sys
import time
import argparse
import requests
import threading

def run(md5file, dst, apikeyfile):
    for line in open(apikeyfile, 'r'):
        print time.strftime('\n%d %b %Y %H:%M:%S', time.gmtime())
        print "ApiKey: %s" % line.rstrip('\r\n')
        if not line.startswith('#'):
            apikey = line.rstrip('\r\n')
            downloaded = download_1000(md5file, dst, apikey)
            print "Count: %s" % len(downloaded)
        save_new_list(downloaded, md5file)

def download_1000(md5file, dst, apikey):
    save = []
    for line in open(md5file, 'r'):
        result = pull_file(line.rstrip('\r\n'), dst, apikey)
        if result == "Success":
            save.append(line)
        elif result == "Over Limit":
            print "Over Limit"
            return save

def pull_file(file_hash, dst, apikey):
    payload = {'action': 'getfile', 'api_key': apikey, 'hash' : file_hash }
    try:r = requests.get("http://api.malshare.com/sampleshare.php", params=payload)
    except Exception as e:
        return "Connection Error"
    if r.content == "Sample not found":
        return "Sample not found"
    elif r.content == "ERROR! => Account not activated":
        return "Error"
    elif "ERROR! => Over Request Limit." in r.content:
        return "Over Limit"
    else:
        open(os.path.join(dst, file_hash),"wb").write(r.content)
        return "Success"

def save_new_list(downloaded, md5file):
    save = []
    for line in open(md5file, 'r'):
        if line not in downloaded:
            save.append(line)
    new = open(md5file, 'w+')
    for md5 in save:
        new.write(md5)
    new.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("md5file", help="md5file containing md5s")
    parser.add_argument("dst", help="dst dir for output")
    parser.add_argument("apikeyfile", help="API Key file")
    args = parser.parse_args()
    while True:
        starttime = time.time()
        run(args.md5file, args.dst, args.apikeyfile)
        time.sleep(86500 - (time.time() - starttime))
