#!/usr/bin/env python
import os
import sys
import json
import time
import socket
import inspect
import argparse
import requests
import threading

class Parent():
    def __init__(self):
        self.results = []
        self.threads = []
        self.attempts = 0

    def _worker(self, scan, timeout):
        try:
            banner = self.get_banner(scan[3], scan[2], timeout)
            if banner:
                r = {'status': scan[0],
                     'protocol': scan[1],
                     'port': scan[2],
                     'ip': scan[3],
                     'time': time.strftime(
                        '%d %b %y %H:%M:%S', time.localtime(float(scan[4]))),
                     'banner': banner.rstrip('\r\n')}
                self.results.append(r)
        except:pass

    def print_info(self, port):
        sys.stdout.write('\n' * 40)
        good = len(self.results)
        bad = self.attempts - good
        sys.stdout.write('Port %s\n' % port)
        sys.stdout.write('Attempts: %s\n' % self.attempts)
        sys.stdout.write('Banners: %s\n' % good)
        sys.stdout.write('Connection Error: %s\n' % bad)

    def que_masscan_file(self, massFile, rate=20, timeout=10):
        start = time.time()
        self.print_info(massFile)
        for line in open(massFile, 'r'):
            if not line.startswith('#'):
                if (time.time() - start) > 2:
                    start = time.time()
                    self.print_info(massFile)
                scan = line.rstrip('\r\n').split(' ')
                t = threading.Thread(target=self._worker, args=(scan, timeout))
                t.start()
                self.attempts += 1
                self.threads.append(t)
                time.sleep(1/float(rate))
        self.print_info(massFile)

    def wait(self):
        try:
            while len(self.threads) > 0:
                new_list = []
                for thread in self.threads:
                    if thread.is_alive():
                        new_list.append(thread)
                self.threads = new_list
        except KeyboardInterrupt:
            exit('Bye')

    def get_banner(self, ip, port, timeout=10):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(int(timeout))
            s.connect((ip, int(port)))
            banner = s.recv(4096)
            s.close()
            return banner
        except socket.error as e:pass

class HoneyPot(Parent): # works
    default_port = 0

    def get_banner(self, ip, port, timeout=10):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(int(timeout))
            s.connect((ip, int(port)))
            s.send('/')
            banner = s.recv(10)
            s.close()
            return banner
        except socket.error as e:pass

class Chargen(Parent): # works
    default_port = 19

    def get_banner(self, ip, port, timeout=10):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(int(timeout))
            s.connect((ip, int(port)))
            banner = s.recv(10)
            s.close()
            return banner
        except socket.error as e:pass

class Ftp(Parent): # works
    default_port = 21

class Ssh(Parent): # works
    default_port = 22

class Telnet(Parent): # works
    default_port = 23

class Private_Mail(Parent):
    default_port = 24

class Smtp(Parent):
    default_port = 25

class Finger(Parent):
    default_port = 79

class Http(Parent): # works
    default_port = 80

    def get_banner(self, ip, port, timeout=10):
        try:
            response = ''
            r = requests.get('http://%s:%s' % (ip, port), timeout=float(timeout))
            for field in r.headers:
                response += '%s:%s' % (field, r.headers[field])
            return response
        except socket.error as e:pass

class Wangkongbao(Parent): # works
    default_port = 85

    def get_banner(self, ip, port, timeout=10):
        try:
            response = ''
            r = requests.get('http://%s:%s/src/acloglogin.php' % (ip, port),
                timeout=float(timeout))
            for field in r.headers:
                response += '%s:%s' % (field, r.headers[field])
            return response
        except socket.error as e:pass

class Remote_Telnet(Parent): # works
    default_port = 107

class Pop3(Parent): # works
    default_port = 110

class Sftp(Parent):
    default_port = 115

class End_Point(Parent):
    default_port = 135

class Nbname(Parent):
    default_port = 137

class Imap(Parent): # works
    default_port = 143

#class Timbuktu(Parent):
#    default_port = 407

class Https(Parent): # works
    default_port = 443

    def get_banner(self, ip, port, timeout=10):
        try:
            response = ''
            r = requests.get('https://%s:%s' % (ip, port), timeout=float(timeout))
            for field in r.headers:
                response += '%s:%s' % (field, r.headers[field])
            return response
        except socket.error as e:pass

class Smb2(Parent):
    default_port = 445

class Modbus(Parent):
    default_port = 502

class Rexec(Parent):
    default_port = 512

#class Rlogin(Parent):
#    default_port = 513

class Rsh(Parent):
    default_port = 514

class Db2(Parent):
    default_port = 523

class Apple_File_Protocol(Parent):
    default_port = 548

class Rsync(Parent): # works
    default_port = 873

    def get_banner(self, ip, port, timeout=10):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(int(timeout))
            s.connect((ip, int(port)))
            s.send('/')
            banner = s.recv(4096)
            s.close()
            return banner
        except socket.error as e:pass

class Vmauthd(Parent): # works
    default_port = 902

class Zenworks(Parent):
    default_port = 998

class Nfs(Parent):
    default_port = 1025

class Java_Rmi(Parent):
    default_port = 1099

class Sap_Host(Parent):
    default_port = 1128

class Sid(Parent):
    default_port = 1158

class Nj_Rat(Parent):
    default_port = 1170

class Nessus(Parent):
    default_port = 1241

class Jrat(Parent):
    default_port = 1336

class Tns(Parent):
    default_port = 1521

class Dark_Comet(Parent):
    default_port = 1604

class H323(Parent):
    default_port = 1720

class Network_file_system(Parent):
    default_port = 2049

class Dlsw(Parent):
    default_port = 2067

class Digi(Parent):
    default_port = 2362

class Alphastor(Parent):
    default_port = 3000

class Novell(Parent):
    default_port = 3037

class Ib(Parent):
    default_port = 3050

#class Apple_Remote_Desktop(Parent):
#    default_port = 3283

class Sap_Router(Parent):
    default_port = 3299

class Mysql(Parent):
    default_port = 3306

class Posion_Ivy(Parent):
    default_port = 3460

class RTMP(Parent):
    default_port = 3500

class Nexpose(Parent):
    default_port = 3780

class Msf(Parent):
    default_port = 3790

class Sockso(Parent):
    default_port = 4444

class Kademlia(Parent):
    default_port = 4672

class Glass_Fish(Parent):
    default_port = 4848

#class Windows_Deployment(Parent):
#    default_port = 5040

class Sip(Parent):
    default_port = 5060

class Postgres(Parent):
    default_port = 5432

class IsqlPlus(Parent):
    default_port = 5560

class Pcanywhere(Parent):
    default_port = 5631

class Vnc(Parent): # works
    default_port = 5900

class Cctv(Parent):
    default_port = 5920

class CouchDb(Parent):
    default_port = 5984

class X11(Parent):
    default_port = 6000

class Manage_Engine(Parent):
    default_port = 6060

class Dameware(Parent):
    default_port = 6129

class Redis(Parent):
    default_port = 6379

class InfoPage_Svr(Parent):
    default_port = 6405

class Groupwise(Parent):
    default_port = 7181

class Energizer(Parent):
    default_port = 7777

class Soap(Parent):
    default_port = 8000

class ChromeCast(Parent):
    default_port = 8008

class Http_Alternative(Parent): # works
    default_port = 8080

    def get_banner(self, ip, port, timeout=10):
        try:
            response = ''
            r = requests.get('http://%s:%s' % (ip, port), timeout=float(timeout))
            for field in r.headers:
                response += '%s:%s' % (field, r.headers[field])
            return response
        except socket.error as e:pass

class Influxdb(Parent):
    default_port = 8086

class Net_Decision(Parent):
    default_port = 8087

class Atlassian(Parent):
    default_port = 8095

class Apache(Parent):
    default_port = 8161

class Vmware_Server(Parent):
    default_port = 8222

class Adobe(Parent):
    default_port = 8400

class Nessus(Parent):
    default_port = 8834

    def get_banner(self, ip, port, timeout=10):
        try:
            response = ''
            r = requests.get('http://%s:%s' % (ip, port), timeout=float(timeout))
            for field in r.headers:
                response += '%s:%s' % (field, r.headers[field])
            return response
        except socket.error as e:pass

class Http_Alternative2(Parent): # works
    default_port = 8888

    def get_banner(self, ip, port, timeout=10):
        try:
            response = ''
            r = requests.get('http://%s:%s' % (ip, port), timeout=float(timeout))
            for field in r.headers:
                response += '%s:%s' % (field, r.headers[field])
            return response
        except socket.error as e:pass

class Raysharp(Parent):
    default_port = 9000

class Vmware_Vcenter(Parent):
    default_port = 9084

class Indices(Parent):
    default_port = 9200

class Openvas(Parent):
    default_port = 9390

class QuickTime(Parent):
    default_port = 9391

class Lantronix(Parent):
    default_port = 9999

class Jspy(Parent):
    default_port = 10001

#class Netbus(Parent):
#    default_port = 12345

class Rosewill(Parent):
    default_port = 13364

class Wdbrpc(Parent):
    default_port = 17185

class Steam(Parent):
    default_port = 27015

class MongoDb(Parent):
    default_port = 27017

class Sub7(Parent):
    default_port = 27374

class Quake(Parent):
    default_port = 27960

class Koyo(Parent):
    default_port = 28784

class Lantronix_Discovery(Parent):
    default_port = 30718

class Titen_Fto(Parent):
    default_port = 31001

class Back_Orfice(Parent):
    default_port = 31337

class Sercomm(Parent):
    default_port = 32764

class Symantic(Parent):
    default_port = 41080

class Sielco(Parent):
    default_port = 46824

class Smt(Parent):
    default_port = 49152

class SubSari(Parent):
    default_port = 50000

class Sap_Management(Parent):
    default_port = 50013

class Msf_Rpc(Parent):
    default_port = 55553

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('input_dir', help="masscan found directory")
    parser.add_argument('output_dir', help="results output dir")
    parser.add_argument('--rate', default="20",
        help="scan interval per sec (DEFAULT:20)")
    parser.add_argument('--timeout', default="10",
        help="connection timeout (DEFAULT:10)")
    args = parser.parse_args()
    lookup_table = {}
    classmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
    for classmember in classmembers:
        if classmember[0] != "Parent":
            cm = classmember[1]()
            lookup_table[cm.default_port] = cm
    for root, d, f in os.walk(args.input_dir):
        for filename in f:
            path = os.path.join(root, filename)
            try:
                module = lookup_table[int(filename)]
                module.que_masscan_file(path, args.rate, args.timeout)
                module.wait()
                f = open(os.path.join(args.output_dir, filename), 'w+')
                for result in module.results:
                    try:f.write('%s\n' % json.dumps(result))
                    except:pass
                f.close()
            except KeyError:
                sys.stderr.write('[Error] no module for: %s\n' % filename)
